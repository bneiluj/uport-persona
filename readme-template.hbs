# uPort Persona
A library for creating, updating and reading attributes and claims on uport personas. It's intended as an easy interface to the uport-registry, allowing developers to focus on the actual data instead of the datastructure of the object stored in the registry. 

The primary interface for accessing persona data is through the Registry object.


## Example usage

### Importing

```js
import { Registry } from 'uport-persona';
```

### Configuring Registry

To use the `Registry` instantiate it like this:

```js
const registry = new Registry()
```

You can pass in various options in a settings object:

```js
import Web3 from 'web3'
const registry = new Registry( {
    web3prov: new Web3.providers.HttpProvider("http://localhost:8545"),
    ipfs: {host: 'localhost', port: 5001, protocol: 'http'}, // Pass in a configuration object or a ipfs-api compliant provider
    registryAddress: '0x...'
})
```

### Returning profile information for an ethereum address

Simply call the `registry.getPublicProfile(...)` method and you will be returned a promise containing the public uport profile.

```js
registry.getPublicProfile('0x06b4915f423117e3c71d671edcbbabd2a0222236').then((profile) => {
    console.log(profile)
})
```

To receive a more advanced Persona object that will let you query the profile based on who issued the claims use
 `registry.getPersona(...)` method and you will be returned a promise containing the Persona object.

```js
registry.getPersona('0x06b4915f423117e3c71d671edcbbabd2a0222236').then((persona) => {
    console.log(persona)
})
```

## Running tests
Simply run
```
$ npm test
```
## Documentation
{{#class name="Registry"}}{{>docs}}{{/class}}
{{#class name="PublicPersona"}}{{>docs}}{{/class}}
